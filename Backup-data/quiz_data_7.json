[
    {
        "question_number": 1,
        "question_content": "Vai trò nào trong SOA thực hiện việc kết nối, tương tác giữa các dịch vụ và quản lý luồng thông tin giữa chúng?",
        "options": {
            "A": "Service Provider",
            "B": "Service Consumer",
            "C": "Service Registry",
            "D": "Service Requestor"
        },
        "correct_answer": "D"
    },
    {
        "question_number": 2,
        "question_content": "Khi xây dựng một dịch vụ web đặt vé xem phim, việc áp dụng độ mịn như thế nào có thể giúp tăng khả năng mở rộng của hệ thống?",
        "options": {
            "A": "Áp dụng độ mịn để chia nhỏ các chức năng như quản lý phim, quản lý rạp chiếu, quản lý đặt vé",
            "B": "Áp dụng độ mịn để gộp các chức năng đặt vé thành một dịch vụ duy nhất",
            "C": "Áp dụng độ mịn không ảnh hưởng đến khả năng mở rộng của hệ thống",
            "D": "Áp dụng độ mịn chỉ cần xác định các API cho việc đặt vé"
        },
        "correct_answer": "B"
    },
    {
        "question_number": 3,
        "question_content": "Giữa RPC-Style và Message-Style cái nào phù hợp hơn cho dịch vụ web đơn giản?",
        "options": {
            "A": "Cả RPC-Style và Message-Style không phù hợp cho dịch vụ web đơn giản",
            "B": "Message-Style phù hợp cho dịch vụ web đơn giản",
            "C": "Cả RPC-Style và Message-Style đều phù hợp cho dịch vụ web đơn giản",
            "D": "RPC-Style phù hợp cho dịch vụ web đơn giản"
        },
        "correct_answer": "D"
    },
    {
        "question_number": 4,
        "question_content": "Điểm khác nhau giữa dịch vụ khả tri và bất khả tri?",
        "options": {
            "A": "Dịch vụ bất khả tri bắt nguồn từ các thực thể. Dịch vụ khả tri không bắt nguồn từ các thực thể",
            "B": "Dịch vụ khả tri bắt nguồn từ các thực thể. Dịch vụ bất khả tri không bắt nguồn từ các thực thể",
            "C": "Dịch vụ bất khả tri có thể được sử dụng bởi nhiều mô hình nghiệp vụ. Dịch vụ khả tri chỉ có thể sử dụng cho một mô hình nghiệp vụ nhất định",
            "D": "Dịch vụ khả tri có thể được sử dụng bởi nhiều mô hình nghiệp vụ. Dịch vụ bất khả tri chỉ có thể sử dụng cho một mô hình nghiệp vụ nhất định"
        },
        "correct_answer": "C"
    },
    {
        "question_number": 5,
        "question_content": "Vì sao đặc điểm hướng mô hình kinh doanh của SOA lại giúp tăng giá trị và tuổi thọ của kiến trúc?",
        "options": {
            "A": "Giữ đồng bộ liên tục với cách doanh nghiệp phát triển theo thời gian",
            "B": "Làm mô hình kinh doanh phát triển nhanh",
            "C": "Hỗ trợ quá trình chuẩn hóa kinh doanh",
            "D": "Phát triển theo thời gian"
        },
        "correct_answer": "A"
    },
    {
        "question_number": 6,
        "question_content": "Mục đích chính của quá trình mô hình hóa dịch vụ trong kiến trúc dịch vụ (SOA) là gì?",
        "options": {
            "A": "Xác định quy trình kết hợp các dịch vụ thành một giải pháp hướng dịch vụ",
            "B": "Xác định các yêu cầu và chức năng của các dịch vụ trong hệ thống",
            "C": "Tổ chức một lượng lớn các đơn vị logic để cuối cùng chúng có thể được tập hợp lại thành các giải pháp hướng dịch vụ",
            "D": "Xác định cấu trúc và quan hệ giữa các dịch vụ trong kiến trúc dịch vụ"
        },
        "correct_answer": "C"
    },
    {
        "question_number": 7,
        "question_content": "Logic bất khả tri là gì?",
        "options": {
            "A": "Logic đủ chung chung, không cụ thể, không liên quan đến một nhiệm vụ gốc cụ thể",
            "B": "Logic đủ chung chung, không cụ thể, dành cho nhiệm vụ có mục đích duy nhất",
            "C": "Logic dành riêng cho một nhiệm vụ có mục đích duy nhất",
            "D": "Logic dành riêng cho một nhiệm vụ có đa mục đích"
        },
        "correct_answer": "A"
    },
    {
        "question_number": 8,
        "question_content": "Điều gì KHÔNG đúng khi nói về việc xác định các tài nguyên trong giai đoạn mô hình hóa dịch vụ ?",
        "options": {
            "A": "Các tài nguyên có thể được biểu diễn bằng dấu gạch chéo làm dấu phân cách",
            "B": "Các tài nguyên nên được giữ ở dạng đơn giản trong giai đoạn này",
            "C": "Các tài nguyên xác định có thể không liên quan đến các thực thể kinh doanh đã biết",
            "D": "Các tài nguyên cần phải tuân thủ hoàn toàn các tiêu chuẩn URL ngay từ đầu"
        },
        "correct_answer": "D"
    },
    {
        "question_number": 9,
        "question_content": "Những hành động nào bị coi là cần loại bỏ trong quy trình mô hình hóa REST Service?",
        "options": {
            "A": "Các hoạt động có sự tham gia của con người",
            "B": "Các hoạt động có sự tham gia của con người và những logic nghiệp vụ cũ không thể đóng gói vào trong dịch vụ",
            "C": "Các hoạt động là những logic nghiệp vụ cũ không thể đóng gói vào trong dịch vụ",
            "D": "Đáp án khác"
        },
        "correct_answer": "B"
    },
    {
        "question_number": 10,
        "question_content": "Kỹ thuật nào có thể được sử dụng để đảm bảo rằng phương thức POST trong dịch vụ tác vụ dựa trên REST hoạt động đáng tin cậy?",
        "options": {
            "A": "Chỉ sử dụng các phương thức HTTP khác như GET hoặc PUT",
            "B": "Bao gồm các tiêu đề bổ sung và xử lý các thông báo phản hồi, hoặc sử dụng một mã định danh yêu cầu duy nhất do người dùng tạo ra trong mã định danh tài nguyên",
            "C": "Tạo ra nhiều phiên bản của dịch vụ tác vụ để tăng độ tin cậy",
            "D": "Sử dụng SOAP thay vì REST để truyền tải các thông điệp"
        },
        "correct_answer": "B"
    },
    {
        "question_number": 11,
        "question_content": "Quy ước đặt tên hoạt động dịch vụ tiện ích (Utility service operations) là gì?",
        "options": {
            "A": "Chỉ sử dụng danh từ",
            "B": "Sử dụng động từ và không lặp lại tên thực thể",
            "C": "Sử dụng động từ + danh từ",
            "D": "Sử dụng cấu trúc \"động từ + danh từ\" hoặc chỉ danh từ"
        },
        "correct_answer": "C"
    },
    {
        "question_number": 12,
        "question_content": "Quy ước đặt tên dịch vụ thực thể (Entity Service) sử dụng cấu trúc đặt tên nào?",
        "options": {
            "A": "Động từ + danh từ",
            "B": "Tên thực thể",
            "C": "Chỉ bao gồm danh từ",
            "D": "Tên hoạt động"
        },
        "correct_answer": "C"
    },
    {
        "question_number": 13,
        "question_content": "Which pattern coordinates transactions that span across multiple services?",
        "options": {
            "A": "Service Mesh",
            "B": "Circuit Breaker",
            "C": "Saga",
            "D": "Webhooks"
        },
        "correct_answer": "C"
    },
    {
        "question_number": 14,
        "question_content": "Which pattern is useful when a client needs to contact multiple services in one logical operation?",
        "options": {
            "A": "Service Mesh",
            "B": "API Gateway",
            "C": "Saga",
            "D": "Backend for Frontend"
        },
        "correct_answer": "B"
    },
    {
        "question_number": 15,
        "question_content": "Which object-oriented design principle is encouraged for complex business logic?",
        "options": {
            "A": "Encapsulation",
            "B": "Inheritance",
            "C": "Applying object-oriented design principles",
            "D": "Polymorphism"
        },
        "correct_answer": "C"
    },
    {
        "question_number": 16,
        "question_content": "What pattern ensures data consistency across microservices?",
        "options": {
            "A": "Domain event",
            "B": "Transaction script",
            "C": "Aggregate",
            "D": "Saga"
        },
        "correct_answer": "D"
    },
    {
        "question_number": 17,
        "question_content": "What is a characteristic of a well-designed microservice?",
        "options": {
            "A": "High interdependency",
            "B": "Shared persistent storage",
            "C": "Encapsulation of business capabilities",
            "D": "Monolithic design"
        },
        "correct_answer": "C"
    },
    {
        "question_number": 18,
        "question_content": "What is a benefit of decentralized governance in microservices?",
        "options": {
            "A": "Uniform technology stack",
            "B": "Freedom to choose suitable tools per service",
            "C": "No need for service boundaries",
            "D": "Eliminating testing requirements"
        },
        "correct_answer": "B"
    },
    {
        "question_number": 19,
        "question_content": "How do service meshes like Istio help in deployment strategies?",
        "options": {
            "A": "They encrypt disks",
            "B": "They manage user permissions",
            "C": "They allow fine-grained traffic routing",
            "D": "They store container images"
        },
        "correct_answer": "C"
    },
    {
        "question_number": 20,
        "question_content": "Which method helps to control traffic flow during progressive delivery?",
        "options": {
            "A": "Webhooks",
            "B": "Feature flags",
            "C": "Service mesh",
            "D": "Sidecar pattern"
        },
        "correct_answer": "B"
    },
    {
        "question_number": 21,
        "question_content": "What challenge is commonly associated with event sourcing?",
        "options": {
            "A": "Fast writes to the database",
            "B": "Scaling read operations",
            "C": "Keeping events small in size",
            "D": "Rebuilding state after many events"
        },
        "correct_answer": "D"
    },
    {
        "question_number": 22,
        "question_content": "How is current application state typically derived in event sourcing?",
        "options": {
            "A": "From direct writes to database state",
            "B": "By aggregating current logs",
            "C": "By replaying past events from an event store",
            "D": "Using cached values only"
        },
        "correct_answer": "C"
    },
    {
        "question_number": 23,
        "question_content": "Why is designing the external API more challenging in microservices than in monoliths?",
        "options": {
            "A": "Microservices do not allow REST",
            "B": "Each service has its own interface and clients vary",
            "C": "Clients always prefer SOAP",
            "D": "Clients do not use APIs"
        },
        "correct_answer": "B"
    },
    {
        "question_number": 24,
        "question_content": "Which pattern is best suited for tailoring APIs to different client needs like mobile vs desktop?",
        "options": {
            "A": "Backend for frontends",
            "B": "Service discovery",
            "C": "Single page apps",
            "D": "Event sourcing"
        },
        "correct_answer": "A"
    },
    {
        "question_number": 25,
        "question_content": "Which protocol is commonly used for synchronous HTTP communication between services?",
        "options": {
            "A": "gRPC",
            "B": "WebSockets",
            "C": "SMTP",
            "D": "Kafka"
        },
        "correct_answer": "A"
    },
    {
        "question_number": 26,
        "question_content": "Why is idempotency important in asynchronous communication?",
        "options": {
            "A": "To increase bandwidth",
            "B": "To reduce latency",
            "C": "To ensure reliable retries",
            "D": "To optimize caching"
        },
        "correct_answer": "C"
    },
    {
        "question_number": 27,
        "question_content": "How are read models typically kept up-to-date?",
        "options": {
            "A": "Through manual synchronization",
            "B": "By querying write databases",
            "C": "By consuming and handling domain events",
            "D": "Through direct API calls"
        },
        "correct_answer": "C"
    },
    {
        "question_number": 28,
        "question_content": "How can query models support different consumer needs in microservices?",
        "options": {
            "A": "By providing a single generic model",
            "B": "By customizing views per use case or API endpoint",
            "C": "By including all write data in the query side",
            "D": "By storing commands and queries in one schema"
        },
        "correct_answer": "B"
    },
    {
        "question_number": 29,
        "question_content": "Which of the following best describes a SAGA pattern in microservices?",
        "options": {
            "A": "A way to encrypt transactions",
            "B": "A distributed sequence of local transactions with compensations",
            "C": "A batch transaction handler",
            "D": "A fallback mechanism for HTTP errors"
        },
        "correct_answer": "B"
    },
    {
        "question_number": 30,
        "question_content": "In orchestration-based saga, which component triggers and monitors the steps?",
        "options": {
            "A": "Service registry",
            "B": "API Gateway",
            "C": "Saga orchestrator",
            "D": "Database monitor"
        },
        "correct_answer": "C"
    },
    {
        "question_number": 31,
        "question_content": "Dịch vụ dựa trên RESTful hỗ trợ định dạng dữ liệu nào?",
        "options": {
            "A": "XML",
            "B": "JSON",
            "C": "YAML",
            "D": "Cả 3 loại trên"
        },
        "correct_answer": "D"
    },
    {
        "question_number": 32,
        "question_content": "Dịch vụ web SOAP có hợp đồng không?",
        "options": {
            "A": "Có",
            "B": "Không",
            "C": "Đôi khi",
            "D": "Tùy thuộc"
        },
        "correct_answer": "A"
    },
    {
        "question_number": 33,
        "question_content": "Cho đoạn mã nguồn:\n\r\r@Path(\"/orders\")\npublic class OrderResource {\n\n    @GET\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response getOrders() {\n        // Get all orders from the database.\n        return Response.ok(orders).build();\n    }\n\n    @POST\n    @Consumes(MediaType.APPLICATION_JSON)\n    public Response createOrder(Order order) {\n        // Create a new order in the database.\n        return Response.ok().build();\n    }\n\n    @PUT\n    @Path(\"{id}\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public Response updateOrder(@PathParam(\"id\") long id, Order order) {\n        // Update the order with the given ID in the database.\n        return Response.ok().build();\n    }\n\n    @DELETE\n    @Path(\"{id}\")\n    public Response deleteOrder(@PathParam(\"id\") long id) {\n        // Delete the order with the given ID from the database.\n        return Response.ok().build();\n    }\n\n}\n\r\rHTTP Request nào sẽ không được chuyển cho updateOrder () ?",
        "options": {
            "A": "Phương thức PUT, đường dẫn /orders/15",
            "B": "Phương thức PUT, đường dẫn /orders",
            "C": "Phương thức PUT, đường dẫn /orders/16",
            "D": "Phương thức PUT, đường dẫn /orders/17"
        },
        "correct_answer": "B"
    },
    {
        "question_number": 34,
        "question_content": "Cho đoạn mã nguồn:\n\r\r@Path(\"/orders\")\npublic class OrderResource {\n\n    @GET\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response getOrders() {\n        // Get all orders from the database.\n        return Response.ok(orders).build();\n    }\n\n    @POST\n    @Consumes(MediaType.APPLICATION_JSON)\n    public Response createOrder(Order order) {\n        // Create a new order in the database.\n        return Response.ok().build();\n    }\n\n    @PUT\n    @Path(\"{id}\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public Response updateOrder(@PathParam(\"id\") long id, Order order) {\n        // Update the order with the given ID in the database.\n        return Response.ok().build();\n    }\n\n    @DELETE\n    @Path(\"{id}\")\n    public Response deleteOrder(@PathParam(\"id\") long id) {\n        // Delete the order with the given ID from the database.\n        return Response.ok().build();\n    }\n\n}\n\r\rHTTP Request nào sẽ được chuyển cho getOrders () ?",
        "options": {
            "A": "Phương thức POST, đường dẫn /orders",
            "B": "Phương thức PUT, đường dẫn /orders",
            "C": "Phương thức GET, đường dẫn /orders/15",
            "D": "Phương thức GET, đường dẫn /orders"
        },
        "correct_answer": "D"
    },
    {
        "question_number": 35,
        "question_content": "Cho đoạn mã nguồn:\n\r\r@Path(\"/orders\")\npublic class OrderResource {\n\n    @GET\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response getOrders() {\n        // Get all orders from the database.\n        return Response.ok(orders).build();\n    }\n\n    @POST\n    @Consumes(MediaType.APPLICATION_JSON)\n    public Response createOrder(Order order) {\n        // Create a new order in the database.\n        return Response.ok().build();\n    }\n\n    @PUT\n    @Path(\"{id}\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public Response updateOrder(@PathParam(\"id\") long id, Order order) {\n        // Update the order with the given ID in the database.\n        return Response.ok().build();\n    }\n\n    @DELETE\n    @Path(\"{id}\")\n    public Response deleteOrder(@PathParam(\"id\") long id) {\n        // Delete the order with the given ID from the database.\n        return Response.ok().build();\n    }\n\n}\n\r\rĐường dẫn của phương thức updateOrder() là gì?",
        "options": {
            "A": "/orders",
            "B": "/order",
            "C": "/orders/{id}",
            "D": "/orders/update"
        },
        "correct_answer": "C"
    },
    {
        "question_number": 36,
        "question_content": "Phần tử nào trong SOAP chứa dữ liệu truyền đi?",
        "options": {
            "A": "Body",
            "B": "Header",
            "C": "Envelope",
            "D": "Data"
        },
        "correct_answer": "A"
    },
    {
        "question_number": 37,
        "question_content": "WSDL có thể mô tả được các thông tin nào của một web service?",
        "options": {
            "A": "Thông tin định dạng dữ liệu",
            "B": "Thông tin địa chỉ và giao thức truy cập",
            "C": "Thông tin mã nguồn và kiểu dữ liệu",
            "D": "Thông tin cấu trúc dữ liệu"
        },
        "correct_answer": "A"
    },
    {
        "question_number": 38,
        "question_content": "Cho định nghĩa WSDL: \n\r\r<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:tns=\"http://www.example.com/accountRegistration\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" name=\"AccountRegistration\" targetNamespace=\"http://www.example.com/accountRegistration\">\n  <types>\n    <xsd:schema elementFormDefault=\"qualified\" targetNamespace=\"http://www.example.com/accountRegistration\">\n      <xsd:element name=\"Account\">\n        <xsd:complexType>\n          <xsd:sequence>\n            <xsd:element name=\"username\" type=\"xsd:string\"/>\n            <xsd:element name=\"password\" type=\"xsd:string\"/>\n          </xsd:sequence>\n        </xsd:complexType>\n      </xsd:element>\n      <xsd:element name=\"AccountResponse\">\n        <xsd:complexType>\n          <xsd:sequence>\n            <xsd:element name=\"success\" type=\"xsd:boolean\"/>\n          </xsd:sequence>\n        </xsd:complexType>\n      </xsd:element>\n    </xsd:schema>\n  </types>\n  <message name=\"RegisterAccount\">\n    <part name=\"parameters\" element=\"tns:Account\"/>\n  </message>\n  <message name=\"RegisterAccountResponse\">\n    <part name=\"parameters\" element=\"tns:AccountResponse\"/>\n  </message>\n  <portType name=\"AccountRegistrationPortType\">\n    <operation name=\"RegisterAccount\">\n      <input message=\"tns:RegisterAccount\"/>\n      <output message=\"tns:RegisterAccountResponse\"/>\n    </operation>\n  </portType>\n  <binding name=\"AccountRegistrationBinding\" type=\"tns:AccountRegistrationPortType\">\n    <soap:binding transport=\"http://schemas.xmlsoap.org/soap/http\"/>\n    <operation name=\"RegisterAccount\">\n      <soap:operation soapAction=\"http://www.example.com/accountRegistration/RegisterAccount\"/>\n      <input>\n        <soap:body use=\"literal\"/>\n      </input>\n      <output>\n        <soap:body use=\"literal\"/>\n      </output>\n    </operation>\n  </binding>\n  <service name=\"AccountRegistrationService\">\n    <port name=\"AccountRegistrationPort\" binding=\"tns:AccountRegistrationBinding\">\n      <soap:address location=\"http://www.example.com/accountRegistration\"/>\n    </port>\n  </service>\n</definitions> \n\r\rThông điệp đầu vào tên là gì ?",
        "options": {
            "A": "Account",
            "B": "RegisterAccount",
            "C": "AccountResponse",
            "D": "RegisterAccountResponse"
        },
        "correct_answer": "B"
    },
    {
        "question_number": 39,
        "question_content": "Cho định nghĩa WSDL: \n\r\r<wsdl:definitions xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:tns=\"http://www.example.com/onlinecharging\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" name=\"OnlineCharging\" targetNamespace=\"http://www.example.com/onlinecharging\">\n  <wsdl:types>\n    <xsd:schema elementFormDefault=\"qualified\" targetNamespace=\"http://www.example.com/onlinecharging\">\n      <xsd:element name=\"Customer\">\n        <xsd:complexType>\n          <xsd:sequence>\n            <xsd:element name=\"CustomerId\" type=\"xsd:string\" minOccurs=\"1\" />\n            <xsd:element name=\"CustomerName\" type=\"xsd:string\" minOccurs=\"1\" />\n          </xsd:sequence>\n        </xsd:complexType>\n      </xsd:element>\n      <xsd:element name=\"Charge\">\n        <xsd:complexType>\n          <xsd:sequence>\n            <xsd:element name=\"CustomerId\" type=\"xsd:string\" minOccurs=\"1\" />\n            <xsd:element name=\"Amount\" type=\"xsd:double\" minOccurs=\"1\" />\n          </xsd:sequence>\n        </xsd:complexType>\n      </xsd:element>\n      <xsd:element name=\"ChargeResult\">\n        <xsd:complexType>\n          <xsd:sequence>\n            <xsd:element name=\"Status\" type=\"xsd:string\" minOccurs=\"1\" />\n            <xsd:element name=\"Message\" type=\"xsd:string\" minOccurs=\"1\" />\n          </xsd:sequence>\n        </xsd:complexType>\n      </xsd:element>\n    </xsd:schema>\n  </wsdl:types>\n  <wsdl:message name=\"ChargeRequest\">\n    <wsdl:part name=\"customer\" element=\"tns:Customer\" />\n    <wsdl:part name=\"charge\" element=\"tns:Charge\" />\n  </wsdl:message>\n  <wsdl:message name=\"ChargeResponse\">\n    <wsdl:part name=\"result\" element=\"tns:ChargeResult\" />\n  </wsdl:message>\n  <wsdl:portType name=\"OnlineChargingPortType\">\n    <wsdl:operation name=\"Charge\">\n      <wsdl:input message=\"tns:ChargeRequest\" />\n      <wsdl:output message=\"tns:ChargeResponse\" />\n    </wsdl:operation>\n  </wsdl:portType>\n  <wsdl:binding name=\"OnlineChargingBinding\" type=\"tns:OnlineChargingPortType\">\n    <soap:binding transport=\"http://schemas.xmlsoap.org/soap/http\" />\n    <wsdl:operation name=\"Charge\">\n      <soap:operation soapAction=\"http://www.example.com/onlinecharging/Charge\" />\n      <wsdl:input>\n        <soap:body use=\"literal\" />\n      </wsdl:input>\n      <wsdl:output>\n        <soap:body use=\"literal\" />\n      </wsdl:output>\n    </wsdl:operation>\n  </wsdl:binding>\n  <wsdl:service name=\"OnlineChargingService\">\n    <wsdl:port name=\"OnlineChargingPort\" binding=\"tns:OnlineChargingBinding\">\n      <soap:address location=\"http://www.example.com/onlinecharging\" />\n    </wsdl:port>\n  </wsdl:service>\n</wsdl:definitions> \n\r\rTên của giao diện dich vụ là gì ?",
        "options": {
            "A": "CustomerPortType",
            "B": "OnlineChargingBinding",
            "C": "OnlineChargingPortType",
            "D": "OnlineChargingService"
        },
        "correct_answer": "C"
    },
    {
        "question_number": 40,
        "question_content": "Cho định nghĩa WSDL: \n\r\r<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:tns=\"http://www.example.com/accountRegistration\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" name=\"AccountRegistration\" targetNamespace=\"http://www.example.com/accountRegistration\">\n  <types>\n    <xsd:schema elementFormDefault=\"qualified\" targetNamespace=\"http://www.example.com/accountRegistration\">\n      <xsd:element name=\"Account\">\n        <xsd:complexType>\n          <xsd:sequence>\n            <xsd:element name=\"username\" type=\"xsd:string\"/>\n            <xsd:element name=\"password\" type=\"xsd:string\"/>\n          </xsd:sequence>\n        </xsd:complexType>\n      </xsd:element>\n      <xsd:element name=\"AccountResponse\">\n        <xsd:complexType>\n          <xsd:sequence>\n            <xsd:element name=\"success\" type=\"xsd:boolean\"/>\n          </xsd:sequence>\n        </xsd:complexType>\n      </xsd:element>\n    </xsd:schema>\n  </types>\n  <message name=\"RegisterAccount\">\n    <part name=\"parameters\" element=\"tns:Account\"/>\n  </message>\n  <message name=\"RegisterAccountResponse\">\n    <part name=\"parameters\" element=\"tns:AccountResponse\"/>\n  </message>\n  <portType name=\"AccountRegistrationPortType\">\n    <operation name=\"RegisterAccount\">\n      <input message=\"tns:RegisterAccount\"/>\n      <output message=\"tns:RegisterAccountResponse\"/>\n    </operation>\n  </portType>\n  <binding name=\"AccountRegistrationBinding\" type=\"tns:AccountRegistrationPortType\">\n    <soap:binding transport=\"http://schemas.xmlsoap.org/soap/http\"/>\n    <operation name=\"RegisterAccount\">\n      <soap:operation soapAction=\"http://www.example.com/accountRegistration/RegisterAccount\"/>\n      <input>\n        <soap:body use=\"literal\"/>\n      </input>\n      <output>\n        <soap:body use=\"literal\"/>\n      </output>\n    </operation>\n  </binding>\n  <service name=\"AccountRegistrationService\">\n    <port name=\"AccountRegistrationPort\" binding=\"tns:AccountRegistrationBinding\">\n      <soap:address location=\"http://www.example.com/accountRegistration\"/>\n    </port>\n  </service>\n</definitions> \n\r\rThông tin nào được yêu cầu khi gửi dữ liệu đến dịch vụ web?",
        "options": {
            "A": "Đầu vào: tên người dùng, mật khẩu, email, số điện thoại. Đầu ra: thành công",
            "B": "Đầu vào: tên người dùng, mật khẩu, email. Đầu ra: thành công",
            "C": "Đầu vào: tên người dùng, mật khẩu. Đầu ra: thành công",
            "D": "Đầu vào: tên người dùng, mật khẩu, email, số điện thoại, địa chỉ. Đầu ra: thành công"
        },
        "correct_answer": "C"
    }
]