[
    {
        "question_number": 2,
        "question_content": "Trong SOA, phương thức giao tiếp giữa các dịch vụ thường sử dụng giao thức nào?",
        "options": {
            "A": "RPC",
            "B": "Message",
            "C": "WSDL",
            "D": "SOAP"
        },
        "correct_answer": "D",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:02:34"
    },
    {
        "question_number": 15,
        "question_content": "What pattern ensures data consistency across microservices?",
        "options": {
            "A": "Domain event",
            "B": "Transaction script",
            "C": "Aggregate",
            "D": "Saga"
        },
        "correct_answer": "D",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:02:38"
    },
    {
        "question_number": 7,
        "question_content": "Trong kiến trúc hướng dịch vụ, REST (Representational State Transfer) là gì?",
        "options": {
            "A": "Một giao thức truyền tải dữ liệu giữa các dịch vụ",
            "B": "Một mô hình kiến trúc phục vụ cho việc truyền tải các tài nguyên qua giao thức HTTP",
            "C": "Một phương pháp tạo ra các dịch vụ mạng phân tán",
            "D": "Một công nghệ dựa trên SOAP để tạo ra các dịch vụ web"
        },
        "correct_answer": "B",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:02:39"
    },
    {
        "question_number": 13,
        "question_content": "Which pattern is useful when a client needs to contact multiple services in one logical operation?",
        "options": {
            "A": "Service Mesh",
            "B": "API Gateway",
            "C": "Saga",
            "D": "Backend for Frontend"
        },
        "correct_answer": "B",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:02:42"
    },
    {
        "question_number": 32,
        "question_content": "Dịch vụ web SOAP có hợp đồng không?",
        "options": {
            "A": "Có",
            "B": "Không",
            "C": "Đôi khi",
            "D": "Tùy thuộc"
        },
        "correct_answer": "A",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:02:44"
    },
    {
        "question_number": 5,
        "question_content": "Định nghĩa microservice trong kiến trúc hướng dịch vụ (SOA)?",
        "options": {
            "A": "Một dịch vụ bất khả tri thường có phạm vi chức năng nhỏ bao gồm logic với các yêu cầu xử lý và triển khai cụ thể",
            "B": "Một dịch vụ không bất khả tri thường có phạm vi chức năng nhỏ bao gồm logic với các yêu cầu xử lý và triển khai cụ thể",
            "C": "Một dịch vụ lớn được chia nhỏ thành các thành phần nhỏ hơn",
            "D": "Một dịch vụ được thiết kế để chạy trên nhiều máy chủ khác nhau"
        },
        "correct_answer": "B",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:02:46"
    },
    {
        "question_number": 1,
        "question_content": "Một giao diện dịch vụ có thể có bao nhiêu thực thi dịch vụ",
        "options": {
            "A": "Mỗi giao diện dịch vụ chỉ được phép có duy nhất 1 thực thi",
            "B": "Số lượng giao diện dịch vụ không vượt quá số lượng giao thức triển khai",
            "C": "Số lượng giao diện dịch vụ không vượt quá số lượng endpoint triển khai",
            "D": "Mỗi giao diện có thể có nhiều thực thi"
        },
        "correct_answer": "D",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:02:50"
    },
    {
        "question_number": 4,
        "question_content": "Phân loại các lớp mô hình dịch vụ?",
        "options": {
            "A": "Bất khả tri: Entity Service Layer, Microservices Layer ; Khả tri: Task Service Layer, Utility Service Layer",
            "B": "Bất khả tri: Entity Service Layer, Utility Service Layer; Khả tri: Task Service Layer, Microservices Layer",
            "C": "Bất khả tri: Task Service Layer, Microservices Layer; Khả tri: Entity Service Layer, Utility Service Layer",
            "D": "Bất khả tri: Task Service Layer, Entity Service Layer ; Khả tri: Microservices Layer, Utility Service Layer"
        },
        "correct_answer": "C",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:02:56"
    },
    {
        "question_number": 35,
        "question_content": "Cho đoạn mã nguồn:\n\r\r@Path(\"/products\")\npublic class ProductResource {\n\n    @GET\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response getProducts() {\n        // Get all products from the database.\n        return Response.ok(products).build();\n    }\n\n    @POST\n    @Consumes(MediaType.APPLICATION_XML)\n    public Response createProduct(Product product) {\n        // Create a new product in the database.\n        return Response.ok().build();\n    }\n\n    @PUT\n    @Path(\"{id}\")\n    @Consumes(MediaType.MULTIPART_FORM_DATA)\n    public Response updateProduct(@PathParam(\"id\") long id, Product product) {\n        // Update the product with the given ID in the database.\n        return Response.ok().build();\n    }\n\n    @DELETE\n    @Path(\"{id}\")\n    public Response deleteProduct(@PathParam(\"id\") long id) {\n        // Delete the product with the given ID from the database.\n        return Response.ok().build();\n    }\n\n}\n \n\r\rPhương thức HTTP cho phương thức createProduct() là gì?",
        "options": {
            "A": "GET",
            "B": "POST",
            "C": "PUT",
            "D": "DELETE"
        },
        "correct_answer": "B",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:03:01"
    },
    {
        "question_number": 26,
        "question_content": "Which protocol is commonly used for synchronous HTTP communication between services?",
        "options": {
            "A": "gRPC",
            "B": "WebSockets",
            "C": "SMTP",
            "D": "Kafka"
        },
        "correct_answer": "A",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:03:04"
    },
    {
        "question_number": 40,
        "question_content": "Cho định nghĩa WSDL: \n\r\r<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:tns=\"http://www.example.com/accountRegistration\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" name=\"AccountRegistration\" targetNamespace=\"http://www.example.com/accountRegistration\">\n  <types>\n    <xsd:schema elementFormDefault=\"qualified\" targetNamespace=\"http://www.example.com/accountRegistration\">\n      <xsd:element name=\"Account\">\n        <xsd:complexType>\n          <xsd:sequence>\n            <xsd:element name=\"username\" type=\"xsd:string\"/>\n            <xsd:element name=\"password\" type=\"xsd:string\"/>\n          </xsd:sequence>\n        </xsd:complexType>\n      </xsd:element>\n      <xsd:element name=\"AccountResponse\">\n        <xsd:complexType>\n          <xsd:sequence>\n            <xsd:element name=\"success\" type=\"xsd:boolean\"/>\n          </xsd:sequence>\n        </xsd:complexType>\n      </xsd:element>\n    </xsd:schema>\n  </types>\n  <message name=\"RegisterAccount\">\n    <part name=\"parameters\" element=\"tns:Account\"/>\n  </message>\n  <message name=\"RegisterAccountResponse\">\n    <part name=\"parameters\" element=\"tns:AccountResponse\"/>\n  </message>\n  <portType name=\"AccountRegistrationPortType\">\n    <operation name=\"RegisterAccount\">\n      <input message=\"tns:RegisterAccount\"/>\n      <output message=\"tns:RegisterAccountResponse\"/>\n    </operation>\n  </portType>\n  <binding name=\"AccountRegistrationBinding\" type=\"tns:AccountRegistrationPortType\">\n    <soap:binding transport=\"http://schemas.xmlsoap.org/soap/http\"/>\n    <operation name=\"RegisterAccount\">\n      <soap:operation soapAction=\"http://www.example.com/accountRegistration/RegisterAccount\"/>\n      <input>\n        <soap:body use=\"literal\"/>\n      </input>\n      <output>\n        <soap:body use=\"literal\"/>\n      </output>\n    </operation>\n  </binding>\n  <service name=\"AccountRegistrationService\">\n    <port name=\"AccountRegistrationPort\" binding=\"tns:AccountRegistrationBinding\">\n      <soap:address location=\"http://www.example.com/accountRegistration\"/>\n    </port>\n  </service>\n</definitions> \n\r\rThông điệp đầu vào tên là gì ?",
        "options": {
            "A": "Account",
            "B": "RegisterAccount",
            "C": "AccountResponse",
            "D": "RegisterAccountResponse"
        },
        "correct_answer": "B",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:03:07"
    },
    {
        "question_number": 21,
        "question_content": "Why is immutability important in event sourcing?",
        "options": {
            "A": "It reduces memory consumption",
            "B": "It avoids concurrency issues and ensures auditability",
            "C": "It allows event deletion when necessary",
            "D": "It simplifies UI rendering"
        },
        "correct_answer": "B",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:03:09"
    },
    {
        "question_number": 33,
        "question_content": "Cho đoạn mã nguồn:\n\r\r@Path(\"/products\")\npublic class ProductResource {\n\n    @GET\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response getProducts() {\n        // Get all products from the database.\n        return Response.ok(products).build();\n    }\n\n    @POST\n    @Consumes(MediaType.APPLICATION_XML)\n    public Response createProduct(Product product) {\n        // Create a new product in the database.\n        return Response.ok().build();\n    }\n\n    @PUT\n    @Path(\"{id}\")\n    @Consumes(MediaType.MULTIPART_FORM_DATA)\n    public Response updateProduct(@PathParam(\"id\") long id, Product product) {\n        // Update the product with the given ID in the database.\n        return Response.ok().build();\n    }\n\n    @DELETE\n    @Path(\"{id}\")\n    public Response deleteProduct(@PathParam(\"id\") long id) {\n        // Delete the product with the given ID from the database.\n        return Response.ok().build();\n    }\n\n}\n \n\r\rHTTP Request nào sẽ được chuyển cho updateProduct () ?",
        "options": {
            "A": "Phương thức PUT, đường dẫn /products",
            "B": "Phương thức PUT, đường dẫn /products/15",
            "C": "Phương thức GET, đường dẫn /products/15",
            "D": "Phương thức GET, đường dẫn /products"
        },
        "correct_answer": "B",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:03:12"
    },
    {
        "question_number": 27,
        "question_content": "What is the primary responsibility of the Query side in a microservices architecture?",
        "options": {
            "A": "To handle incoming commands and update data",
            "B": "To listen for domain events and update read models",
            "C": "To manage authentication and authorization",
            "D": "To generate API documentation"
        },
        "correct_answer": "B",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:03:15"
    },
    {
        "question_number": 19,
        "question_content": "What is a typical component of a CI/CD toolchain?",
        "options": {
            "A": "Load balancer",
            "B": "Version control system",
            "C": "Firewall",
            "D": "Database driver"
        },
        "correct_answer": "B",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:03:19"
    },
    {
        "question_number": 29,
        "question_content": "What is the key difference between monolithic and microservices-based transaction handling?",
        "options": {
            "A": "Monoliths handle distributed state",
            "B": "Microservices use centralized databases",
            "C": "Microservices involve distributed transaction context",
            "D": "Monoliths cannot handle ACID properties"
        },
        "correct_answer": "C",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:03:22"
    },
    {
        "question_number": 39,
        "question_content": "Cho định nghĩa WSDL: \n\r\r<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:tns=\"http://www.example.com/accountRegistration\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" name=\"AccountRegistration\" targetNamespace=\"http://www.example.com/accountRegistration\">\n  <types>\n    <xsd:schema elementFormDefault=\"qualified\" targetNamespace=\"http://www.example.com/accountRegistration\">\n      <xsd:element name=\"Account\">\n        <xsd:complexType>\n          <xsd:sequence>\n            <xsd:element name=\"username\" type=\"xsd:string\"/>\n            <xsd:element name=\"password\" type=\"xsd:string\"/>\n          </xsd:sequence>\n        </xsd:complexType>\n      </xsd:element>\n      <xsd:element name=\"AccountResponse\">\n        <xsd:complexType>\n          <xsd:sequence>\n            <xsd:element name=\"success\" type=\"xsd:boolean\"/>\n          </xsd:sequence>\n        </xsd:complexType>\n      </xsd:element>\n    </xsd:schema>\n  </types>\n  <message name=\"RegisterAccount\">\n    <part name=\"parameters\" element=\"tns:Account\"/>\n  </message>\n  <message name=\"RegisterAccountResponse\">\n    <part name=\"parameters\" element=\"tns:AccountResponse\"/>\n  </message>\n  <portType name=\"AccountRegistrationPortType\">\n    <operation name=\"RegisterAccount\">\n      <input message=\"tns:RegisterAccount\"/>\n      <output message=\"tns:RegisterAccountResponse\"/>\n    </operation>\n  </portType>\n  <binding name=\"AccountRegistrationBinding\" type=\"tns:AccountRegistrationPortType\">\n    <soap:binding transport=\"http://schemas.xmlsoap.org/soap/http\"/>\n    <operation name=\"RegisterAccount\">\n      <soap:operation soapAction=\"http://www.example.com/accountRegistration/RegisterAccount\"/>\n      <input>\n        <soap:body use=\"literal\"/>\n      </input>\n      <output>\n        <soap:body use=\"literal\"/>\n      </output>\n    </operation>\n  </binding>\n  <service name=\"AccountRegistrationService\">\n    <port name=\"AccountRegistrationPort\" binding=\"tns:AccountRegistrationBinding\">\n      <soap:address location=\"http://www.example.com/accountRegistration\"/>\n    </port>\n  </service>\n</definitions> \n\r\rThực thi dịch vụ tên gì ?",
        "options": {
            "A": "AccountRegistrationService",
            "B": "AccountRegistration",
            "C": "AccountRegistrationPortType",
            "D": "AccountRegistrationBinding"
        },
        "correct_answer": "D",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:03:26"
    },
    {
        "question_number": 22,
        "question_content": "In event sourcing, what is an 'event' typically?",
        "options": {
            "A": "An object describing a user interface action",
            "B": "A notification for external systems",
            "C": "A record of something that has occurred in the system",
            "D": "A script executed on database change"
        },
        "correct_answer": "C",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:03:28"
    },
    {
        "question_number": 34,
        "question_content": "Cho đoạn mã nguồn:\n\r\r@Path(\"/orders\")\npublic class OrderResource {\n\n    @GET\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response getOrders() {\n        // Get all orders from the database.\n        return Response.ok(orders).build();\n    }\n\n    @POST\n    @Consumes(MediaType.APPLICATION_JSON)\n    public Response createOrder(Order order) {\n        // Create a new order in the database.\n        return Response.ok().build();\n    }\n\n    @PUT\n    @Path(\"{id}\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public Response updateOrder(@PathParam(\"id\") long id, Order order) {\n        // Update the order with the given ID in the database.\n        return Response.ok().build();\n    }\n\n    @DELETE\n    @Path(\"{id}\")\n    public Response deleteOrder(@PathParam(\"id\") long id) {\n        // Delete the order with the given ID from the database.\n        return Response.ok().build();\n    }\n\n}\n\r\rĐường dẫn của phương thức deleteOrder() là gì?",
        "options": {
            "A": "/orders",
            "B": "/order",
            "C": "/orders/{id}",
            "D": "/orders/delete"
        },
        "correct_answer": "C",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:03:31"
    },
    {
        "question_number": 28,
        "question_content": "What is a major challenge when implementing denormalized read models?",
        "options": {
            "A": "They slow down read operations",
            "B": "They make microservices loosely coupled",
            "C": "They require syncing across many events and potential duplication",
            "D": "They increase security"
        },
        "correct_answer": "C",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:03:33"
    },
    {
        "question_number": 23,
        "question_content": "How can a gateway handle varied client needs efficiently?",
        "options": {
            "A": "Through DNS switching",
            "B": "By rejecting requests not from mobile",
            "C": "Using backend for frontends or GraphQL",
            "D": "Using token refresh only"
        },
        "correct_answer": "C",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:03:35"
    },
    {
        "question_number": 17,
        "question_content": "Which method best helps monitor distributed microservices?",
        "options": {
            "A": "Spreadsheets",
            "B": "System.out.println logs",
            "C": "Centralized logging and tracing",
            "D": "Manual inspection"
        },
        "correct_answer": "C",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:03:37"
    },
    {
        "question_number": 6,
        "question_content": "Điều kiện để một dịch vụ được coi là bất khả tri?",
        "options": {
            "A": "Chứa logic có khả năng tái sử dụng bởi nhiều quy trình kinh doanh",
            "B": "Chứa logic được sử dụng trong một quy trình kinh doanh duy nhất",
            "C": "Các chức năng được phát triển từ các thực thể",
            "D": "Các chức năng chỉ gồm logic không liên quan đến thực thể"
        },
        "correct_answer": "A",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:03:39"
    },
    {
        "question_number": 36,
        "question_content": "WSDL có thể mô tả được các thông tin nào của một web service?",
        "options": {
            "A": "Thông tin định dạng dữ liệu",
            "B": "Thông tin địa chỉ và giao thức truy cập",
            "C": "Thông tin mã nguồn và kiểu dữ liệu",
            "D": "Thông tin cấu trúc dữ liệu"
        },
        "correct_answer": "A",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:03:41"
    },
    {
        "question_number": 24,
        "question_content": "Which of the following is NOT typically a client of the FTGO application’s API?",
        "options": {
            "A": "Browser-based JavaScript",
            "B": "Mobile applications",
            "C": "Third-party partners",
            "D": "Hardware routers"
        },
        "correct_answer": "D",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:03:43"
    },
    {
        "question_number": 37,
        "question_content": "Phương thức HTTP nào được sử dụng để tạo mới một resource trong Restful web service?",
        "options": {
            "A": "PUT",
            "B": "GET",
            "C": "POST",
            "D": "DELETE"
        },
        "correct_answer": "C",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:03:46"
    },
    {
        "question_number": 38,
        "question_content": "Cho định nghĩa WSDL: \n\r\r<wsdl:definitions xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:tns=\"http://www.example.com/onlinecharging\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" name=\"OnlineCharging\" targetNamespace=\"http://www.example.com/onlinecharging\">\n  <wsdl:types>\n    <xsd:schema elementFormDefault=\"qualified\" targetNamespace=\"http://www.example.com/onlinecharging\">\n      <xsd:element name=\"Customer\">\n        <xsd:complexType>\n          <xsd:sequence>\n            <xsd:element name=\"CustomerId\" type=\"xsd:string\" minOccurs=\"1\" />\n            <xsd:element name=\"CustomerName\" type=\"xsd:string\" minOccurs=\"1\" />\n          </xsd:sequence>\n        </xsd:complexType>\n      </xsd:element>\n      <xsd:element name=\"Charge\">\n        <xsd:complexType>\n          <xsd:sequence>\n            <xsd:element name=\"CustomerId\" type=\"xsd:string\" minOccurs=\"1\" />\n            <xsd:element name=\"Amount\" type=\"xsd:double\" minOccurs=\"1\" />\n          </xsd:sequence>\n        </xsd:complexType>\n      </xsd:element>\n      <xsd:element name=\"ChargeResult\">\n        <xsd:complexType>\n          <xsd:sequence>\n            <xsd:element name=\"Status\" type=\"xsd:string\" minOccurs=\"1\" />\n            <xsd:element name=\"Message\" type=\"xsd:string\" minOccurs=\"1\" />\n          </xsd:sequence>\n        </xsd:complexType>\n      </xsd:element>\n    </xsd:schema>\n  </wsdl:types>\n  <wsdl:message name=\"ChargeRequest\">\n    <wsdl:part name=\"customer\" element=\"tns:Customer\" />\n    <wsdl:part name=\"charge\" element=\"tns:Charge\" />\n  </wsdl:message>\n  <wsdl:message name=\"ChargeResponse\">\n    <wsdl:part name=\"result\" element=\"tns:ChargeResult\" />\n  </wsdl:message>\n  <wsdl:portType name=\"OnlineChargingPortType\">\n    <wsdl:operation name=\"Charge\">\n      <wsdl:input message=\"tns:ChargeRequest\" />\n      <wsdl:output message=\"tns:ChargeResponse\" />\n    </wsdl:operation>\n  </wsdl:portType>\n  <wsdl:binding name=\"OnlineChargingBinding\" type=\"tns:OnlineChargingPortType\">\n    <soap:binding transport=\"http://schemas.xmlsoap.org/soap/http\" />\n    <wsdl:operation name=\"Charge\">\n      <soap:operation soapAction=\"http://www.example.com/onlinecharging/Charge\" />\n      <wsdl:input>\n        <soap:body use=\"literal\" />\n      </wsdl:input>\n      <wsdl:output>\n        <soap:body use=\"literal\" />\n      </wsdl:output>\n    </wsdl:operation>\n  </wsdl:binding>\n  <wsdl:service name=\"OnlineChargingService\">\n    <wsdl:port name=\"OnlineChargingPort\" binding=\"tns:OnlineChargingBinding\">\n      <soap:address location=\"http://www.example.com/onlinecharging\" />\n    </wsdl:port>\n  </wsdl:service>\n</wsdl:definitions> \n\r\rTên của giao diện dich vụ là gì ?",
        "options": {
            "A": "CustomerPortType",
            "B": "OnlineChargingBinding",
            "C": "OnlineChargingPortType",
            "D": "OnlineChargingService"
        },
        "correct_answer": "C",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:03:48"
    },
    {
        "question_number": 11,
        "question_content": "Để làm cho một dịch vụ trở nên dễ tìm kiếm cho các dịch vụ khác, chúng ta có thể sử dụng phương pháp nào?",
        "options": {
            "A": "Bổ sung thông tin siêu dữ liệu (metadata)",
            "B": "Sử dụng hợp đồng dịch vụ chi tiết",
            "C": "Tạo lớp dịch vụ trừu tượng",
            "D": "Thực hiện kiểm tra hiệu suất dịch vụ"
        },
        "correct_answer": "A",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:03:52"
    },
    {
        "question_number": 31,
        "question_content": "Dịch vụ dựa trên SOAP hỗ trợ định dạng dữ liệu nào?",
        "options": {
            "A": "CSV",
            "B": "JSON",
            "C": "YAML",
            "D": "XML"
        },
        "correct_answer": "D",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:03:55"
    },
    {
        "question_number": 14,
        "question_content": "What technique helps handle messages that cannot be processed immediately?",
        "options": {
            "A": "Web scraping",
            "B": "Dead letter queue",
            "C": "Session caching",
            "D": "Rate limiting"
        },
        "correct_answer": "B",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:03:58"
    },
    {
        "question_number": 18,
        "question_content": "What is a characteristic of a well-designed microservice?",
        "options": {
            "A": "High interdependency",
            "B": "Shared persistent storage",
            "C": "Encapsulation of business capabilities",
            "D": "Monolithic design"
        },
        "correct_answer": "C",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:04:01"
    },
    {
        "question_number": 20,
        "question_content": "In Kubernetes, what mechanism can automatically roll back a failed deployment?",
        "options": {
            "A": "Pod eviction",
            "B": "Horizontal scaling",
            "C": "Liveness probe",
            "D": "Deployment controller"
        },
        "correct_answer": "D",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:04:02"
    },
    {
        "question_number": 16,
        "question_content": "Which pattern should be used when object references span multiple services?",
        "options": {
            "A": "Repository pattern",
            "B": "Decorator pattern",
            "C": "Aggregate pattern",
            "D": "Strategy pattern"
        },
        "correct_answer": "C",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:04:05"
    },
    {
        "question_number": 12,
        "question_content": "Trong Utility Service Design, nguyên tắc \"Tái sử dụng Dịch vụ\" nhấn mạnh vào điều gì?",
        "options": {
            "A": "Xây dựng microservice như một dịch vụ web dựa trên SOAP",
            "B": "Tạo ra API phong phú",
            "C": "Phát triển dịch vụ tiện ích linh hoạt và tái sử dụng",
            "D": "Thực hiện các chức năng xử lý cấp thấp"
        },
        "correct_answer": "C",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:04:08"
    },
    {
        "question_number": 3,
        "question_content": "SOA tập trung vào việc phân chia ứng dụng thành các đơn vị như thế nào?",
        "options": {
            "A": "Chức năng",
            "B": "Dữ liệu",
            "C": "Quy trình",
            "D": "Tất cả các phương án trên"
        },
        "correct_answer": "D",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:04:11"
    },
    {
        "question_number": 9,
        "question_content": "Trong mô hình REST, tài nguyên được đại diện bởi gì?",
        "options": {
            "A": "URI (Uniform Resource Identifier)",
            "B": "URL (Uniform Resource Locator)",
            "C": "HTML (HyperText Markup Language)",
            "D": "XML (eXtensible Markup Language)"
        },
        "correct_answer": "B",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:04:13"
    },
    {
        "question_number": 25,
        "question_content": "What technique helps handle messages that cannot be processed immediately?",
        "options": {
            "A": "Web scraping",
            "B": "Dead letter queue",
            "C": "Session caching",
            "D": "Rate limiting"
        },
        "correct_answer": "B",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:04:15"
    },
    {
        "question_number": 30,
        "question_content": "In orchestration-based saga, which component triggers and monitors the steps?",
        "options": {
            "A": "Service registry",
            "B": "API Gateway",
            "C": "Saga orchestrator",
            "D": "Database monitor"
        },
        "correct_answer": "C",
        "crawled_by": "B21DCCN692",
        "crawled_at": "2025-06-13 08:04:18"
    }
]